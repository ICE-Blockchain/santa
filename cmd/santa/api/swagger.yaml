# SPDX-License-Identifier: ice License 1.0

basePath: /v1r
definitions:
  badges.AchievingRange:
    properties:
      fromInclusive:
        type: integer
      toInclusive:
        type: integer
    type: object
  badges.Badge:
    properties:
      achieved:
        type: boolean
      achievingRange:
        $ref: '#/definitions/badges.AchievingRange'
      name:
        type: string
      percentageOfUsersInProgress:
        type: number
      type:
        $ref: '#/definitions/badges.GroupType'
    type: object
  badges.BadgeSummary:
    properties:
      index:
        type: integer
      lastIndex:
        type: integer
      name:
        type: string
      type:
        $ref: '#/definitions/badges.GroupType'
    type: object
  badges.GroupType:
    enum:
    - level
    - coin
    - social
    type: string
    x-enum-varnames:
    - LevelGroupType
    - CoinGroupType
    - SocialGroupType
  levelsandroles.Role:
    properties:
      enabled:
        example: true
        type: boolean
      type:
        allOf:
        - $ref: '#/definitions/levelsandroles.RoleType'
        example: snowman
    type: object
  levelsandroles.RoleType:
    enum:
    - ambassador
    type: string
    x-enum-varnames:
    - AmbassadorRoleType
  levelsandroles.Summary:
    properties:
      level:
        example: 11
        type: integer
      roles:
        items:
          $ref: '#/definitions/levelsandroles.Role'
        type: array
    type: object
  server.ErrorResponse:
    properties:
      code:
        example: SOMETHING_NOT_FOUND
        type: string
      data:
        additionalProperties: {}
        type: object
      error:
        example: something is missing
        type: string
    type: object
  tasks.Data:
    properties:
      requiredQuantity:
        example: 3
        type: integer
      telegramUserHandle:
        example: jdoe1
        type: string
      twitterUserHandle:
        example: jdoe2
        type: string
      verificationCode:
        example: ABC
        type: string
    type: object
  tasks.Metadata:
    properties:
      errorDescription:
        example: Error description
        type: string
      iconUrl:
        example: https://app.ice.com/web/invite.svg
        type: string
      longDescription:
        example: Long description
        type: string
      shortDescription:
        example: Short description
        type: string
      taskUrl:
        example: https://x.com/ice_blockchain
        type: string
      title:
        example: Claim username
        type: string
    type: object
  tasks.Task:
    properties:
      completed:
        example: false
        type: boolean
      data:
        $ref: '#/definitions/tasks.Data'
      metadata:
        $ref: '#/definitions/tasks.Metadata'
      prize:
        example: 200
        type: number
      type:
        allOf:
        - $ref: '#/definitions/tasks.Type'
        example: claim_username
    type: object
  tasks.Type:
    enum:
    - claim_username
    - start_mining
    - upload_profile_picture
    - follow_us_on_twitter
    - join_twitter
    - join_telegram
    - invite_friends
    - join_twitter
    - join_telegram
    - join_reddit_ion
    - join_instagram_ion
    - join_twitter_ion
    - join_telegram_ion
    - join_youtube
    - join_twitter_multiversx
    - join_twitter_xportal
    - join_telegram_multiversx
    - join_bulllish_cmc
    - join_ion_cmc
    - join_watchlist_cmc
    - join_portfolio_coingecko
    - join_holdcoin
    - join_human
    - watch_video_with_code_confirmation_1
    - invite_friends_5
    - invite_friends_10
    - invite_friends_25
    - invite_friends_50
    - invite_friends_100
    - invite_friends_200
    - signup_callfluent
    - signup_sauces
    - signup_sealsend
    - claim_badge_l1
    - claim_badge_l2
    - claim_badge_l3
    - claim_badge_l4
    - claim_badge_l5
    - claim_badge_l6
    - claim_badge_c1
    - claim_badge_c2
    - claim_badge_c3
    - claim_badge_c4
    - claim_badge_c5
    - claim_badge_c6
    - claim_badge_c7
    - claim_badge_c8
    - claim_badge_c9
    - claim_badge_c10
    - claim_badge_s1
    - claim_badge_s2
    - claim_badge_s3
    - claim_badge_s4
    - claim_badge_s5
    - claim_badge_s6
    - claim_badge_s7
    - claim_badge_s8
    - claim_badge_s9
    - claim_badge_s10
    - claim_level_1
    - claim_level_2
    - claim_level_3
    - claim_level_4
    - claim_level_5
    - claim_level_6
    - claim_level_7
    - claim_level_8
    - claim_level_9
    - claim_level_10
    - claim_level_11
    - claim_level_12
    - claim_level_13
    - claim_level_14
    - claim_level_15
    - claim_level_16
    - claim_level_17
    - claim_level_18
    - claim_level_19
    - claim_level_20
    - claim_level_21
    - mining_streak_7
    - mining_streak_14
    - mining_streak_30
    type: string
    x-enum-varnames:
    - ClaimUsernameType
    - StartMiningType
    - UploadProfilePictureType
    - FollowUsOnTwitterType
    - JoinTwitterType
    - JoinTelegramType
    - InviteFriendsType
    - JoinTwitterUsType
    - JoinTelegramUsType
    - JoinRedditIONType
    - JoinInstagramIONType
    - JoinTwitterIONType
    - JoinTelegramIONType
    - JoinYoutubeType
    - JoinTwitterMultiversxType
    - JoinTwitterXPortalType
    - JoinTelegramMultiversxType
    - JoinBullishCMCType
    - JoinIONCMCType
    - JoinWatchListCMCType
    - JoinPortfolioCoinGeckoType
    - JoinHoldCoinType
    - JoinHumanType
    - WatchVideoWithCodeConfirmation1Type
    - InviteFriends5Type
    - InviteFriends10Type
    - InviteFriends25Type
    - InviteFriends50Type
    - InviteFriends100Type
    - InviteFriends200Type
    - SignUpCallfluentType
    - SignUpSaucesType
    - SignUpSealsendType
    - ClaimLevelBadge1Type
    - ClaimLevelBadge2Type
    - ClaimLevelBadge3Type
    - ClaimLevelBadge4Type
    - ClaimLevelBadge5Type
    - ClaimLevelBadge6Type
    - ClaimCoinBadge1Type
    - ClaimCoinBadge2Type
    - ClaimCoinBadge3Type
    - ClaimCoinBadge4Type
    - ClaimCoinBadge5Type
    - ClaimCoinBadge6Type
    - ClaimCoinBadge7Type
    - ClaimCoinBadge8Type
    - ClaimCoinBadge9Type
    - ClaimCoinBadge10Type
    - ClaimSocialBadge1Type
    - ClaimSocialBadge2Type
    - ClaimSocialBadge3Type
    - ClaimSocialBadge4Type
    - ClaimSocialBadge5Type
    - ClaimSocialBadge6Type
    - ClaimSocialBadge7Type
    - ClaimSocialBadge8Type
    - ClaimSocialBadge9Type
    - ClaimSocialBadge10Type
    - ClaimLevel1Type
    - ClaimLevel2Type
    - ClaimLevel3Type
    - ClaimLevel4Type
    - ClaimLevel5Type
    - ClaimLevel6Type
    - ClaimLevel7Type
    - ClaimLevel8Type
    - ClaimLevel9Type
    - ClaimLevel10Type
    - ClaimLevel11Type
    - ClaimLevel12Type
    - ClaimLevel13Type
    - ClaimLevel14Type
    - ClaimLevel15Type
    - ClaimLevel16Type
    - ClaimLevel17Type
    - ClaimLevel18Type
    - ClaimLevel19Type
    - ClaimLevel20Type
    - ClaimLevel21Type
    - MiningStreak7Type
    - MiningStreak14Type
    - MiningStreak30Type
info:
  contact:
    name: ice.io
    url: https://ice.io
  description: API that handles everything related to read-only operations for user's
    achievements and gamification progress.
  title: Achievements API
  version: latest
paths:
  /achievement-summaries/badges/users/{userId}:
    get:
      consumes:
      - application/json
      description: Returns user's summary about badges.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: the id of the user you need summary for
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/badges.BadgeSummary'
            type: array
        "400":
          description: if validations fail
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: if not authorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: if not allowed
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "422":
          description: if syntax fails
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "504":
          description: if request times out
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      tags:
      - Badges
  /achievement-summaries/levels-and-roles/users/{userId}:
    get:
      consumes:
      - application/json
      description: Returns user's summary about levels & roles.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: the id of the user you need summary for
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/levelsandroles.Summary'
        "400":
          description: if validations fail
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: if not authorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "422":
          description: if syntax fails
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "504":
          description: if request times out
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      tags:
      - Levels & Roles
  /badges/{badgeType}/users/{userId}:
    get:
      consumes:
      - application/json
      description: Returns all badges of the specific type for the user, with the
        progress for each of them.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: the id of the user you need progress for
        in: path
        name: userId
        required: true
        type: string
      - description: the type of the badges
        enum:
        - level
        - coin
        - social
        in: path
        name: badgeType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/badges.Badge'
            type: array
        "400":
          description: if validations fail
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: if not authorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: if not allowed
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "422":
          description: if syntax fails
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "504":
          description: if request times out
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      tags:
      - Badges
  /tasks/x/users/{userId}:
    get:
      consumes:
      - application/json
      description: Returns all the tasks and provided user's progress for each of
        them.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: the id of the user you need progress for
        in: path
        name: userId
        required: true
        type: string
      - description: pending/completed status filter
        enum:
        - pending
        - completed
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/tasks.Task'
            type: array
        "400":
          description: if validations fail
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: if not authorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: if not allowed
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "422":
          description: if syntax fails
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "504":
          description: if request times out
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      tags:
      - Tasks
schemes:
- https
swagger: "2.0"
