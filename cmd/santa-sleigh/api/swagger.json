{
    "schemes": [
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "API that handles everything related to write-only operations for user's achievements and gamification progress.",
        "title": "Achievements API",
        "contact": {
            "name": "ice.io",
            "url": "https://ice.io"
        },
        "version": "latest"
    },
    "basePath": "/v1w",
    "paths": {
        "/tasks/{taskType}/users/{userId}": {
            "put": {
                "description": "Completes the specific task (identified via task type) for the specified user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "enum": [
                            "claim_username",
                            "start_mining",
                            "upload_profile_picture",
                            "follow_us_on_twitter",
                            "join_telegram",
                            "invite_friends"
                        ],
                        "type": "string",
                        "description": "the type of the task",
                        "name": "taskType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the id of the user that completed the task",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request params. Set it only if task completion requires additional data.",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/main.CompleteTaskRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    },
                    "400": {
                        "description": "if validations fail",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "if not authorized",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "if not allowed",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "if user not found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "if syntax fails",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "if request times out",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.CompleteTaskRequestBody": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/tasks.Data"
                }
            }
        },
        "server.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "SOMETHING_NOT_FOUND"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "error": {
                    "type": "string",
                    "example": "something is missing"
                }
            }
        },
        "tasks.Data": {
            "type": "object",
            "properties": {
                "requiredQuantity": {
                    "type": "integer",
                    "example": 3
                },
                "telegramUserHandle": {
                    "type": "string",
                    "example": "jdoe1"
                },
                "twitterUserHandle": {
                    "type": "string",
                    "example": "jdoe2"
                }
            }
        }
    }
}