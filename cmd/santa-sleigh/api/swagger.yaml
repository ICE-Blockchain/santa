# SPDX-License-Identifier: ice License 1.0

basePath: /v1w
definitions:
  main.CompleteTaskRequestBody:
    properties:
      data:
        $ref: '#/definitions/tasks.Data'
    type: object
  server.ErrorResponse:
    properties:
      code:
        example: SOMETHING_NOT_FOUND
        type: string
      data:
        additionalProperties: {}
        type: object
      error:
        example: something is missing
        type: string
    type: object
  tasks.Data:
    properties:
      requiredQuantity:
        example: 3
        type: integer
      telegramUserHandle:
        example: jdoe1
        type: string
      twitterUserHandle:
        example: jdoe2
        type: string
    type: object
info:
  contact:
    name: ice.io
    url: https://ice.io
  description: API that handles everything related to write-only operations for user's
    achievements and gamification progress.
  title: Achievements API
  version: latest
paths:
  /tasks/{taskType}/users/{userId}:
    put:
      consumes:
      - application/json
      description: Completes the specific task (identified via task type) for the
        specified user.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: the type of the task
        enum:
        - claim_username
        - start_mining
        - upload_profile_picture
        - follow_us_on_twitter
        - join_telegram
        - invite_friends
        in: path
        name: taskType
        required: true
        type: string
      - description: the id of the user that completed the task
        in: path
        name: userId
        required: true
        type: string
      - description: Request params. Set it only if task completion requires additional
          data.
        in: body
        name: request
        schema:
          $ref: '#/definitions/main.CompleteTaskRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: ok
        "400":
          description: if validations fail
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: if not authorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: if not allowed
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: if user not found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "422":
          description: if syntax fails
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "504":
          description: if request times out
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      tags:
      - Tasks
schemes:
- https
swagger: "2.0"
